generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role Role @default(STUDENT)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Instructor's courses
  courses Course[] @relation("InstructorCourses")

  // Student relations
  enrollments Enrollment[]
  progress    Progress[]
  profile                String?
  isVerified                Boolean  @default(false)
  verificationToken         String? 
  verificationTokenExpiry   DateTime?
}

model Course {
  id           Int     @id @default(autoincrement())
  title        String
  description  String?
  instructorId Int
  instructor   User    @relation("InstructorCourses", fields: [instructorId], references: [id])

  lessons     Lesson[]
  enrollments Enrollment[]
  progress    Progress[]

  // Category relation
  categoryId  Int?
  category    CourseCategory? @relation(fields: [categoryId], references: [id])

  // Admin approval status
  status      CourseStatus @default(PENDING)

  // Informational prerequisites
  prerequisites Json? // store array of strings e.g. ["Basic JS", "HTML & CSS"]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  @@map("Course")
}

model Lesson {
  id         Int     @id @default(autoincrement())
  title      String
  content    String?
  videoUrl   String?
  attachmentUrl String?  // optional file/pdf attachment
  courseId   Int
  course     Course  @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?

  courses     Course[]
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  studentId Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  progress           Int       @default(0)     
  completedLessonIds Json?                    
  completedAt        DateTime?    
  student User   @relation(fields: [studentId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])

  certificateUrl String?

  @@unique([studentId, courseId])
}

model Progress {
  id        Int      @id @default(autoincrement())
  studentId Int
  courseId  Int
  completed Boolean  @default(false)
  score     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student User   @relation(fields: [studentId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])

  @@unique([studentId, courseId])
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum CourseStatus {
  PENDING
  PUBLISHED
  REJECTED
  DRAFT
}
